#include <random>
#include <iostream>
#include <cstdio>

 
int main()
{

  int nsteps=5;
  int npaths=10;
  double ran=0.0;
  int cont = 1;
  
  //int sumax = 0;
  //int sumay = 0;
  //int X [nsteps];
  //int Y [nsteps];
  float M [nsteps*npaths];
  float N [nsteps*npaths];
  float R [nsteps*npaths*2];
  float T [nsteps];

  // for(int i=0; i<nsteps; i++){
  // X[i]=0;
  // Y[i]=0;
  //}

  for(int i=0; i<nsteps; i++){
   T[i]=0;
  }


  

   for(int i=0; i<nsteps*npaths; i++){
    M[i]=0.0;
    N[i]=0.0;
    //R[i]=0.0;
    }

     for(int i=0; i<nsteps*npaths*2; i++){
    R[i]=0.0;
    }
  
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> dis(0.0, 1.0);

    for(int i=0; i<npaths; i++){
      // printf("%3d  ", i+1);
      int x=0;
      int y=0;
      int sum=0;
    for (int n = 0; n <nsteps; ++n) {
      ran= dis(gen);
      // Use dis to transform the random unsigned int generated by gen into a 
        // double in [1, 2). Each call to dis(gen) generates a new random double
      if(ran<0.25){
	x -=1;
      }
      else if(ran<0.5){
	y -=1;
      }
      else if(ran<0.75){
	x +=1;
      }
      else{
	y +=1;
	}
       
	M[n+i*nsteps] = 1.0*x;
	N[n+i*nsteps] = 1.0*y;

	 for(int j=0; j<n+i*nsteps; j++){
	   if((M[n+i*nsteps] == M[j]) && (N[n+i*nsteps] == N[j])){
	       sum +=1;
	     }
        }

	 if(sum!=0){
	   n -=1;
	 }

	 if(sum==4){
	   n=nsteps;
	 }


	
	//R[i] += 1.0*((X[n]*X[n]) +(Y[n]*Y[n])) ;
	
	//printf("%3d %3d ", X[n], Y[n]);
    }
    
    // printf("%5.3f %5.3f  ", M[i]/npaths, N[i]/npaths);
    // printf("%5.3f %5.3f  ", (M[i]*M[i])/npaths,  (N[i]*N[i])/npaths);
    // printf("%5.3f  ", R[i]/npaths);

    for(int n=0; n<nsteps*npaths; n++){
      R[n]=M[n];
     }

    for(int n=nsteps*npaths ; n<2*nsteps*npaths; n++){
      R[n]=N[n-nsteps*npaths];
     }


    
    }

    /*
     for(int j=0; j<nsteps*npaths; j++){
       printf("%5.3f %5.3f  ", R[j], R[j+nsteps*npaths]);
       printf(" \n");
    }
    */

    for(int j=0; j<nsteps; j++){
      for(int i=j; i<npaths*nsteps; i += nsteps){
       printf("%5.0f %5.0f  ", R[i], R[i + nsteps*npaths]);
       T[j] += ((R[i]*R[i]) + ( R[i + nsteps*npaths]* R[i + nsteps*npaths]));
      }
      printf("%5.3f %3d ", T[j]/npaths, cont);
       printf(" \n");
       cont++;
    }



    
    
     //  printf(" \n");
     
    

     // delete [] X;
     // delete [] Y;
     //delete [] M;
     //delete [] N;
     //delete [] R;
}

